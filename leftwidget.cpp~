#include"leftwidget.h"

LeftWidget::LeftWidget(QWidget *parent,Data_Container *DB):myScrollArea(parent)
{
  int i;
  data=DB;
  
  geoFrameShow=true;
  paraFrameShow=true;
  
  QFrame *mainFrame=new QFrame;

  geoLabel=new TitleLabelWidget("几何");

  geoFrame=new QFrame;

  treewidget=new QTreeWidget;
  treewidget->setHeaderHidden(true);
  treewidget->setColumnCount(1);

  rightMenu=new QMenu(treewidget);
  treewidget->setContextMenuPolicy(Qt::CustomContextMenu);
  connect(treewidget,&QWidget::customContextMenuRequested,[this](){
      if(rowIndex!=-1)
	{ rightMenu->exec(QCursor::pos()); }
    });
  
  QAction *defineGeomtry=new QAction("Define Geometry ...",this);
  rightMenu->addAction(defineGeomtry);
  connect(defineGeomtry,&QAction::triggered,[this](){
      emit treeSelectIndex(rowIndex);
    });

  connect(treewidget,&QTreeWidget::itemSelectionChanged,this,&processRes);

  connect(geoLabel,&TitleLabelWidget::m_clicked,[this](){
      if(geoFrameShow)
	{
	  treewidget->hide();
	  geoFrameShow=false;
	}
      else
	{
	  treewidget->show();
	  geoFrameShow=true;
	}
    });

  treeview_geom=new QTreeWidgetItem(treewidget,QStringList(QString("叶片几何")));
  treeview_geom->setExpanded(true);
  treeview_hub=new QTreeWidgetItem(treewidget,QStringList(QString("Hub")));
  treeview_hub->setIcon(0,QIcon(":/images/cross"));
  treeview_tip=new QTreeWidgetItem(treewidget,QStringList(QString("Tip")));
  treeview_tip->setIcon(0,QIcon(":/images/cross"));

  for(i=0;i<NRMAX;i++)
    {
      treeview_row[i]=new QTreeWidgetItem(treeview_geom,QStringList(QString("row %1").arg(i+1)));
      treeview_row[i]->setHidden(true);
      treeview_row[i]->setIcon(0,QIcon(":/images/cross"));
    }
  treeview_row[0]->setHidden(false);
  rowIndex=-1;

  QVBoxLayout *geoLayout=new QVBoxLayout(geoFrame);
  geoLayout->addWidget(treewidget);

  paraLabel=new TitleLabelWidget("参数设置");

  paraFrame=new QFrame;

  QLabel *NR_label=new QLabel(tr("叶片排数"));
  NR=new WidgetGroup(NRMAX);
  connect(NR->edit,&QLineEdit::editingFinished,[this](){
      bool s;
      double cache;
      cache=NR->edit->text().toInt(&s);
      if(s)
	{
	  data->mesh.nrs=cache;
	  data->geom.nrs=cache;
	  data->ismodified=true;
	  refreshTreeWidget();
	  for(int i=0;i<NR->edit->text().toInt();i++)
	    { treeview_row[i]->setHidden(false); }
	}
      else
	{ NR->edit->setText(QString::number(data->mesh.nrs)); }
    });

  QLabel *INTYPE_label=new QLabel(tr("插值类型"));
  INTYPE=new QComboBox;
  INTYPE->addItem(tr("样条插值"));
  INTYPE->addItem(tr("线性插值"));
  connect(INTYPE,SIGNAL(currentIndexChanged(int)),this,SLOT(INTYPE_fun(int)));

  QLabel *IEXTIO_label=new QLabel(tr("进出口形状"));
  IEXTIO=new QComboBox;
  IEXTIO->addItem(tr("根据hub和tip确定"));
  IEXTIO->addItem(tr("用户自定义"));
  
  additionalFrame=new QFrame;
  QLabel *ILIN_label=new QLabel(tr("给定进口"));
  ILIN=new QComboBox;
  ILIN->addItem(tr("Z坐标"));
  ILIN->addItem(tr("R坐标"));
  connect(ILIN,SIGNAL(currentIndexChanged(int)),this,SLOT(ILIN_fun(int)));
  
  QLabel *CDHIN_label=new QLabel(tr("Hub"));
  CDHIN=new QLineEdit;
  connect(CDHIN,&QLineEdit::editingFinished,[this](){
      bool s;
      double cache;
      cache=CDHIN->text().toDouble(&s);
      if(s)
	{
	  data->mesh.cdhin=cache;
	  data->ismodified=true;
	}
      else
	{ CDHIN->setText(QString::number(data->mesh.cdhin)); }
    });
  
  QLabel *CDTIN_label=new QLabel(tr("Tip"));
  CDTIN=new QLineEdit;
  connect(CDTIN,&QLineEdit::editingFinished,[this](){
      bool s;
      double cache;
      cache=CDTIN->text().toDouble(&s);
      if(s)
	{
	  data->mesh.cdtin=cache;
	  data->ismodified=true;
	}
      else
	{ CDTIN->setText(QString::number(data->mesh.cdtin)); }
    });

  QLabel *ILOUT_label=new QLabel(tr("给定出口"));
  ILOUT=new QComboBox;
  ILOUT->addItem(tr("Z坐标"));
  ILOUT->addItem(tr("R坐标"));
  connect(ILOUT,SIGNAL(currentIndexChanged(int)),this,SLOT(ILOUT_fun(int)));
  
  QLabel *CDHOUT_label=new QLabel(tr("Hub"));
  CDHOUT=new QLineEdit;
  connect(CDHOUT,&QLineEdit::editingFinished,[this](){
      bool s;
      double cache;
      cache=CDHOUT->text().toDouble(&s);
      if(s)
	{
	  data->mesh.cdhout=cache;
	  data->ismodified=true;
	}
      else
	{ CDHOUT->setText(QString::number(data->mesh.cdhout)); }
    });
  QLabel *CDTOUT_label=new QLabel(tr("Tip"));
  CDTOUT=new QLineEdit;
  connect(CDTOUT,&QLineEdit::editingFinished,[this](){
      bool s;
      double cache;
      cache=CDTOUT->text().toDouble(&s);
      if(s)
	{
	  data->mesh.cdtout=cache;
	  data->ismodified=true;
	}
      else
	{ CDTOUT->setText(QString::number(data->mesh.cdtout)); }
    });

  QGridLayout *additionalLayout=new QGridLayout(additionalFrame);
  linenum=0;
  
  additionalLayout->addWidget(ILIN_label  ,linenum,0);
  additionalLayout->addWidget(ILIN        ,linenum,1);
  linenum++;
  additionalLayout->addWidget(CDHIN_label ,linenum,0);
  additionalLayout->addWidget(CDHIN       ,linenum,1);
  linenum++;
  additionalLayout->addWidget(CDTIN_label ,linenum,0);
  additionalLayout->addWidget(CDTIN       ,linenum,1);
  linenum++;
  additionalLayout->addWidget(ILOUT_label ,linenum,0);
  additionalLayout->addWidget(ILOUT       ,linenum,1);
  linenum++;
  additionalLayout->addWidget(CDHOUT_label,linenum,0);
  additionalLayout->addWidget(CDHOUT      ,linenum,1);
  linenum++;
  additionalLayout->addWidget(CDTOUT_label,linenum,0);
  additionalLayout->addWidget(CDTOUT      ,linenum,1);

  additionalFrame->hide();
  //connect(IEXTIO,SIGNAL(currentIndexChanged(int)),this,SLOT(IEXTIO_fun(int)));
  connect(IEXTIO,SIGNAL(currentIndexChanged(int)),this,SLOT(IEXTIO_fun(int)));

  QLabel *IEXTUP_label=new QLabel(tr("叶片上游延伸方式"));
  IEXTUP=new QComboBox;
  IEXTUP->addItem(tr("外插延伸"));
  IEXTUP->addItem(tr("轴向延伸"));
  connect(IEXTUP,SIGNAL(currentIndexChanged(int)),this,SLOT(IEXTUP_fun(int)));

  QLabel *PEXTUP_label=new QLabel(tr("上游延伸段斜率的弦长比例"));
  PEXTUP=new QLineEdit;
  connect(PEXTUP,&QLineEdit::editingFinished,[this](){
      bool s;
      double cache;
      cache=PEXTUP->text().toDouble(&s);
      if(s)
	{
	  data->mesh.pextup=cache;
	  data->ismodified=true;
	}
      else
	{ PEXTUP->setText(QString::number(data->mesh.pextup)); }
    });

  QLabel *IEXTDN_label=new QLabel(tr("叶片下游延伸方式"));
  IEXTDN=new QComboBox;
  IEXTDN->addItem(tr("外插延伸"));
  IEXTDN->addItem(tr("轴向延伸"));
  connect(IEXTDN,SIGNAL(currentIndexChanged(int)),this,SLOT(IEXTDN_fun(int)));

  QLabel *PEXTDN_label=new QLabel(tr("下游延伸段斜率的弦长比例"));
  PEXTDN=new QLineEdit;
  connect(PEXTDN,&QLineEdit::editingFinished,[this](){
      bool s;
      double cache;
      cache=PEXTDN->text().toDouble(&s);
      if(s)
	{
	  data->mesh.pextdn=cache;
	  data->ismodified=true;
	}
      else
	{ PEXTDN->setText(QString::number(data->mesh.pextdn)); }
    });

  QGroupBox *streamwisePara=new QGroupBox(tr("流向网格设置"));
  QLabel *NUP_label=new QLabel(tr("叶片上游网格数"));
  NUP=new QLineEdit;
  connect(NUP,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=NUP->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].nup=cache;
	      data->ismodified=true; }
	  else
	    { NUP->setText(QString::number(data->mesh.row[rowIndex].nup)); }
	}
      else
	{ NUP->setText(QString::number(0)); }
    });

  QLabel *NMID_label=new QLabel(tr("叶片区域网格数"));
  NMID=new QLineEdit;
  connect(NMID,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=NMID->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].nmid=cache;
	      data->ismodified=true; }
	  else
	    { NMID->setText(QString::number(data->mesh.row[rowIndex].nmid)); }
	}
      else
	{ NMID->setText(QString::number(0)); }
    });

  QLabel *NDN_label=new QLabel(tr("叶片下游网格数"));
  NDN=new QLineEdit;
  connect(NDN,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=NDN->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].ndn=cache;
	      data->ismodified=true; }
	  else
	    { NDN->setText(QString::number(data->mesh.row[rowIndex].ndn)); }
	}
      else
	{ NDN->setText(QString::number(0)); }
    });

  QLabel *A1J_label=new QLabel(tr("叶片前缘网格无量纲长度"));
  A1J=new QLineEdit;
  connect(A1J,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=A1J->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].a1j=cache;
	      data->ismodified=true; }
	  else
	    { A1J->setText(QString::number(data->mesh.row[rowIndex].a1j)); }
	}
      else
	{ A1J->setText(QString::number(0)); }
    });

  QLabel *Q1J_label=new QLabel(tr("叶片前缘网格增长比例"));
  Q1J=new QLineEdit;
  connect(Q1J,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=Q1J->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].q1j=cache;
	      data->ismodified=true; }
	  else
	    { Q1J->setText(QString::number(data->mesh.row[rowIndex].q1j)); }
	}
      else
	{ Q1J->setText(QString::number(0)); }
    });

  QLabel *ANJ_label=new QLabel(tr("叶片尾缘网格无量纲长度"));
  ANJ=new QLineEdit;
  connect(ANJ,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=ANJ->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].anj=cache;
	      data->ismodified=true; }
	  else
	    { ANJ->setText(QString::number(data->mesh.row[rowIndex].anj)); }
	}
      else
	{ ANJ->setText(QString::number(0)); }
    });

  QLabel *QNJ_label=new QLabel(tr("叶片尾缘网格增长比例"));
  QNJ=new QLineEdit;
  connect(QNJ,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=QNJ->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].qnj=cache;
	      data->ismodified=true; }
	  else
	    { QNJ->setText(QString::number(data->mesh.row[rowIndex].qnj)); }
	}
      else
	{ QNJ->setText(QString::number(0)); }
    });

  QLabel *AMAXJ_label=new QLabel(tr("流向网格最大无量纲长度"));
  AMAXJ=new QLineEdit;
  connect(AMAXJ,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=AMAXJ->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].amaxj=cache;
	      data->ismodified=true; }
	  else
	    { AMAXJ->setText(QString::number(data->mesh.row[rowIndex].amaxj)); }
	}
      else
	{ AMAXJ->setText(QString::number(0)); }
    });

  QLabel *NMIDSP_label=new QLabel(tr("分流叶片网格数"));
  NMIDSP=new QLineEdit;
  connect(NMIDSP,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=NMIDSP->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].nmidsp=cache;
	      data->ismodified=true; }
	  else
	    { NMIDSP->setText(QString::number(data->mesh.row[rowIndex].nmidsp)); }
	}
      else
	{ NMIDSP->setText(QString::number(0)); }
    });

  QGridLayout *streamwiseLayout=new QGridLayout(streamwisePara);
  linenum=0;
  streamwiseLayout->addWidget(NUP_label    ,linenum,0);
  streamwiseLayout->addWidget(NUP          ,linenum,1);
  linenum++;
  streamwiseLayout->addWidget(NMID_label   ,linenum,0);
  streamwiseLayout->addWidget(NMID         ,linenum,1);
  linenum++;
  streamwiseLayout->addWidget(NDN_label    ,linenum,0);
  streamwiseLayout->addWidget(NDN          ,linenum,1);
  linenum++;
  streamwiseLayout->addWidget(A1J_label    ,linenum,0);
  streamwiseLayout->addWidget(A1J          ,linenum,1);
  linenum++;
  streamwiseLayout->addWidget(Q1J_label    ,linenum,0);
  streamwiseLayout->addWidget(Q1J          ,linenum,1);
  linenum++;
  streamwiseLayout->addWidget(ANJ_label    ,linenum,0);
  streamwiseLayout->addWidget(ANJ          ,linenum,1);
  linenum++;
  streamwiseLayout->addWidget(QNJ_label    ,linenum,0);
  streamwiseLayout->addWidget(QNJ          ,linenum,1);
  linenum++;
  streamwiseLayout->addWidget(AMAXJ_label  ,linenum,0);
  streamwiseLayout->addWidget(AMAXJ        ,linenum,1);
  linenum++;
  streamwiseLayout->addWidget(NMIDSP_label ,linenum,0);
  streamwiseLayout->addWidget(NMIDSP       ,linenum,1);

  QGroupBox *spanwisePara=new QGroupBox(tr("展向网格设置"));
  QLabel *KM_label=new QLabel(tr("径向网格节点数"));
  KM=new QLineEdit;
  connect(NMIDSP,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=KM->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.km=cache;	      
	      data->ismodified=true; }
	  else
	    { KM->setText(QString::number(data->mesh.km)); }
	}
      else
	{ KM->setText(QString::number(0)); }
    });
  QGridLayout *spanwiseLayout=new QGridLayout(spanwisePara);
  linenum=0;
  spanwiseLayout->addWidget(KM_label,linenum,0);
  spanwiseLayout->addWidget(KM      ,linenum,1);

  QGroupBox *circumPara=new QGroupBox(tr("周向网格设置"));
  QLabel *IM_label=new QLabel(tr("周向网格节点数"));
  IM=new QLineEdit;
  connect(IM,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=IM->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].im=cache;
	      data->ismodified=true; }
	  else
	    { IM->setText(QString::number(data->mesh.row[rowIndex].im)); }
	}
      else
	{ IM->setText(QString::number(0)); }
    });

  QLabel *A1I_label=new QLabel(tr("叶片前缘网格无量纲长度"));
  A1I=new QLineEdit;
  connect(A1I,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=A1I->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].a1i=cache;
	      data->ismodified=true; }
	  else
	    { A1I->setText(QString::number(data->mesh.row[rowIndex].a1i)); }
	}
      else
	{ A1I->setText(QString::number(0)); }
    });

  QLabel *Q1I_label=new QLabel(tr("叶片前缘网格增长比例"));
  Q1I=new QLineEdit;
  connect(Q1I,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=Q1I->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].q1i=cache;
	      data->ismodified=true; }
	  else
	    { Q1I->setText(QString::number(data->mesh.row[rowIndex].q1i)); }
	}
      else
	{ Q1I->setText(QString::number(0)); }
    });

  QLabel *ANI_label=new QLabel(tr("叶片尾缘网格无量纲长度"));
  ANI=new QLineEdit;
  connect(ANI,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=ANI->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].ani=cache;
	      data->ismodified=true; }
	  else
	    { ANI->setText(QString::number(data->mesh.row[rowIndex].ani)); }
	}
      else
	{ ANI->setText(QString::number(0)); }
    });

  QLabel *QNI_label=new QLabel(tr("叶片尾缘网格增长比例"));
  QNI=new QLineEdit;
  connect(QNI,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=QNI->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].qni=cache;
	      data->ismodified=true; }
	  else
	    { QNI->setText(QString::number(data->mesh.row[rowIndex].qni)); }
	}
      else
	{ QNI->setText(QString::number(0)); }
    });

  QLabel *AMAXI_label=new QLabel(tr("周向网格最大无量纲长度"));
  AMAXI=new QLineEdit;
  connect(AMAXI,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=AMAXI->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].amaxi=cache;
	      data->ismodified=true; }
	  else
	    { AMAXI->setText(QString::number(data->mesh.row[rowIndex].amaxi)); }
	}
      else
	{ AMAXI->setText(QString::number(0));}
    });

  QGridLayout *circumLayout=new QGridLayout(circumPara);
  linenum=0;
  circumLayout->addWidget(IM_label    ,linenum,0);
  circumLayout->addWidget(IM          ,linenum,1);
  linenum++;
  circumLayout->addWidget(A1I_label   ,linenum,0);
  circumLayout->addWidget(A1I         ,linenum,1);
  linenum++;
  circumLayout->addWidget(Q1I_label   ,linenum,0);
  circumLayout->addWidget(Q1I         ,linenum,1);
  linenum++;
  circumLayout->addWidget(ANI_label   ,linenum,0);
  circumLayout->addWidget(ANI         ,linenum,1);
  linenum++;
  circumLayout->addWidget(QNI_label   ,linenum,0);
  circumLayout->addWidget(QNI         ,linenum,1);
  linenum++;
  circumLayout->addWidget(AMAXI_label ,linenum,0);
  circumLayout->addWidget(AMAXI       ,linenum,1);

  shiftPara=new QGroupBox(tr("网格修改"));
  //shiftPara->setCheckable(true);
  //shiftPara->setChecked(false);

  QLabel *XFACTOR_label=new QLabel(tr("轴向缩放因子"));
  XFACTOR=new QLineEdit;
  connect(XFACTOR,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=XFACTOR->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].xfac=cache;
	      data->ismodified=true; }
	  else
	    { XFACTOR->setText(QString::number(data->mesh.row[rowIndex].xfac)); }
	}
      else
	{ XFACTOR->setText(QString::number(0)); }
    });

  QLabel *XSHIFT_label=new QLabel(tr("轴向平移距离"));
  XSHIFT=new QLineEdit;
  connect(XSHIFT,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=XSHIFT->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].xshft=cache;
	      data->ismodified=true; }
	  else
	    { XSHIFT->setText(QString::number(data->mesh.row[rowIndex].xshft)); }
	}
      else
	{ XSHIFT->setText(QString::number(0)); }
    });

  QLabel *RTFACTOR_label=new QLabel(tr("周向缩放因子"));
  RTFACTOR=new QLineEdit;
  connect(RTFACTOR,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=RTFACTOR->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].rtfac=cache;
	      data->ismodified=true; }
	  else
	    { RTFACTOR->setText(QString::number(data->mesh.row[rowIndex].rtfac)); }
	}
      else
	{ RTFACTOR->setText(QString::number(0)); }
    });

  QLabel *RTSHIFT_label=new QLabel(tr("周向平移距离"));
  RTSHIFT=new QLineEdit;
  connect(RTSHIFT,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=RTSHIFT->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].rtshft=cache;
	      data->ismodified=true; }
	  else
	    { RTSHIFT->setText(QString::number(data->mesh.row[rowIndex].rtshft)); }
	}
      else
	{ RTSHIFT->setText(QString::number(0)); }
    });

  QLabel *RFACTOR_label=new QLabel(tr("径向缩放因子"));
  RFACTOR=new QLineEdit;
  connect(RFACTOR,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=RFACTOR->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].rfac=cache;
	      data->ismodified=true; }
	  else
	    { RFACTOR->setText(QString::number(data->mesh.row[rowIndex].rfac)); }
	}
      else
	{ RFACTOR->setText(QString::number(0)); }
    });

  QLabel *RSHIFT_label=new QLabel(tr("径向平移距离"));
  RSHIFT=new QLineEdit;
  connect(RSHIFT,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=RSHIFT->text().toInt(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    { data->mesh.row[rowIndex].rshft=cache;
	      data->ismodified=true; }
	  else
	    { RSHIFT->setText(QString::number(data->mesh.row[rowIndex].rshft)); }
	}
      else
	{ RSHIFT->setText(QString::number(0)); }
    });

  QLabel *ZNAKD_label=new QLabel(tr("ZNAKD"));
  ZNAKD=new QLineEdit;
  connect(ZNAKD,&QLineEdit::editingFinished,[this](){
      bool s;
      double cache;
      cache=ZNAKD->text().toDouble(&s);
      if(rowIndex>=0)
	{
	  if(s)
	    {
	      data->mesh.row[rowIndex].znakd=cache;
	      data->ismodified=true;
	    }
	  else
	    {
	      ZNAKD->setText(QString::number(0));
	    }
	}
    });

  QGridLayout *shiftLayout=new QGridLayout(shiftPara);
  linenum=0;
  shiftLayout->addWidget(XFACTOR_label  ,linenum,0);
  shiftLayout->addWidget(XFACTOR        ,linenum,1);
  linenum++;
  shiftLayout->addWidget(XSHIFT_label   ,linenum,0);
  shiftLayout->addWidget(XSHIFT         ,linenum,1);
  linenum++;
  shiftLayout->addWidget(RTFACTOR_label ,linenum,0);
  shiftLayout->addWidget(RTFACTOR       ,linenum,1);
  linenum++;
  shiftLayout->addWidget(RTSHIFT_label  ,linenum,0);
  shiftLayout->addWidget(RTSHIFT        ,linenum,1);
  linenum++;
  shiftLayout->addWidget(RFACTOR_label  ,linenum,0);
  shiftLayout->addWidget(RFACTOR        ,linenum,1);
  linenum++;
  shiftLayout->addWidget(RSHIFT_label   ,linenum,0);
  shiftLayout->addWidget(RSHIFT         ,linenum,1);

  QGridLayout *paraLayout=new QGridLayout(paraFrame);
  linenum=0;
  paraLayout->addWidget(NR_label          ,linenum,0);
  paraLayout->addWidget(NR                ,linenum,1);
  linenum++;
  paraLayout->addWidget(INTYPE_label      ,linenum,0);
  paraLayout->addWidget(INTYPE            ,linenum,1);
  linenum++;
  paraLayout->addWidget(IEXTIO_label      ,linenum,0);
  paraLayout->addWidget(IEXTIO            ,linenum,1);
  linenum++;
  paraLayout->addWidget(additionalFrame   ,linenum,0,1,2);
  linenum++;
  paraLayout->addWidget(IEXTUP_label      ,linenum,0);
  paraLayout->addWidget(IEXTUP            ,linenum,1);
  linenum++;
  paraLayout->addWidget(PEXTUP_label      ,linenum,0);
  paraLayout->addWidget(PEXTUP            ,linenum,1);
  linenum++;
  paraLayout->addWidget(IEXTDN_label      ,linenum,0);
  paraLayout->addWidget(IEXTDN            ,linenum,1);
  linenum++;
  paraLayout->addWidget(PEXTDN_label      ,linenum,0);
  paraLayout->addWidget(PEXTDN            ,linenum,1);
  linenum++;
  paraLayout->addWidget(streamwisePara    ,linenum,0,1,2);
  linenum++;
  paraLayout->addWidget(spanwisePara      ,linenum,0,1,2);
  linenum++;
  paraLayout->addWidget(circumPara        ,linenum,0,1,2);
  linenum++;
  paraLayout->addWidget(shiftPara         ,linenum,0,1,2);
  linenum++;
  paraLayout->addWidget(ZNAKD_label       ,linenum,0);
  paraLayout->addWidget(ZNAKD             ,linenum,1);

  QVBoxLayout *mainLayout=new QVBoxLayout(mainFrame);
  mainLayout->setContentsMargins(0,0,0,0);
  mainLayout->setSpacing(0);
  mainLayout->addWidget(geoLabel);
  mainLayout->addWidget(geoFrame);
  mainLayout->addWidget(paraLabel);
  mainLayout->addWidget(paraFrame);
  setWidget(mainFrame);

  INTYPE->setCurrentIndex(data->mesh.intype);
  IEXTIO->setCurrentIndex(data->mesh.iextio);
  ILIN->setCurrentIndex(data->mesh.ilin);
  CDHIN->setText(QString::number(data->mesh.cdhin));
  CDTIN->setText(QString::number(data->mesh.cdtin));
  ILOUT->setCurrentIndex(data->mesh.ilout);
  CDHOUT->setText(QString::number(data->mesh.cdhout));
  CDTOUT->setText(QString::number(data->mesh.cdtout));
  IEXTUP->setCurrentIndex(data->mesh.iextup);
  PEXTUP->setText(QString::number(data->mesh.pextup));
  IEXTDN->setCurrentIndex(data->mesh.iextdn);
  PEXTDN->setText(QString::number(data->mesh.pextdn));
  KM->setText(QString::number(data->mesh.km));
  NUP->setText(tr(""));
  NMID->setText(tr(""));
  NDN->setText(tr(""));
  A1J->setText(tr(""));
  Q1J->setText(tr(""));
  ANJ->setText(tr(""));
  QNJ->setText(tr(""));
  AMAXJ->setText(tr(""));
  NMIDSP->setText(tr(""));
  IM->setText(tr(""));
  A1I->setText(tr(""));
  Q1I->setText(tr(""));
  ANI->setText(tr(""));
  QNI->setText(tr(""));
  AMAXI->setText(tr(""));
  XFACTOR->setText(tr(""));
  XSHIFT->setText(tr(""));
  RTFACTOR->setText(tr(""));
  RTSHIFT->setText(tr(""));
  RFACTOR->setText(tr(""));
  RSHIFT->setText(tr(""));
  ZNAKD->setText(tr(""));
}

void LeftWidget::refreshTreeWidget()
{
  int i;
  for(i=0;i<NRMAX;i++)
    {
      treeview_row[i]->setHidden(true);
    }
}

void LeftWidget::processRes()
{
  if(treewidget->currentItem()->text(0)==tr("叶片几何"))
    { rowIndex=-1; }
  else if(treewidget->currentItem()->text(0)==tr("Hub"))
    { rowIndex=-2; }
  else if(treewidget->currentItem()->text(0)==tr("Tip"))
    { rowIndex=-3; }
  else
    { rowIndex=treewidget->currentItem()->text(0).section(" ",-1,-1).toInt()-1; }
  initRowVar();
}

void LeftWidget::INTYPE_fun(int index)
{
  data->mesh.intype=index;
}

void LeftWidget::IEXTIO_fun(int index)
{
  if(index==0)
    { additionalFrame->hide(); }
  else if(index==1)
    { additionalFrame->show(); }
  data->mesh.iextio=index;
}

void LeftWidget::ILIN_fun(int index)
{
  data->mesh.ilin=index+1;
}

void LeftWidget::ILOUT_fun(int index)
{
  data->mesh.ilout=index+1;
}

void LeftWidget::IEXTUP_fun(int index)
{
  data->mesh.iextup=index;
}

void LeftWidget::IEXTDN_fun(int index)
{
  data->mesh.iextdn=index;
}

void LeftWidget::initWin()
{
  NR->setEditText(QString::number(data->mesh.nrs));
  INTYPE->setCurrentIndex(data->mesh.intype);
  IEXTIO->setCurrentIndex(data->mesh.iextio);
  ILIN->setCurrentIndex(data->mesh.ilin);
  CDHIN->setText(QString::number(data->mesh.cdhin));
  CDTIN->setText(QString::number(data->mesh.cdtin));
  ILOUT->setCurrentIndex(data->mesh.ilout);
  CDHOUT->setText(QString::number(data->mesh.cdhout));
  CDTOUT->setText(QString::number(data->mesh.cdtout));
  IEXTUP->setCurrentIndex(data->mesh.iextup);
  PEXTUP->setText(QString::number(data->mesh.pextup));
  IEXTDN->setCurrentIndex(data->mesh.iextdn);
  PEXTDN->setText(QString::number(data->mesh.pextdn));
  KM->setText(QString::number(data->mesh.km));
  treewidget->setCurrentItem(treeview_geom);
  rowIndex=-1;
  initRowVar();
}

void LeftWidget::initRowVar()
{
  ROWMESHDATA *p;
  if(rowIndex<=-1)
    {
      NUP->setText(tr(""));
      NMID->setText(tr(""));
      NDN->setText(tr(""));
      A1J->setText(tr(""));
      Q1J->setText(tr(""));
      ANJ->setText(tr(""));
      QNJ->setText(tr(""));
      AMAXJ->setText(tr(""));
      NMIDSP->setText(tr(""));
      IM->setText(tr(""));
      A1I->setText(tr(""));
      Q1I->setText(tr(""));
      ANI->setText(tr(""));
      QNI->setText(tr(""));
      AMAXI->setText(tr(""));
      XFACTOR->setText(tr(""));
      XSHIFT->setText(tr(""));
      RTFACTOR->setText(tr(""));
      RTSHIFT->setText(tr(""));
      RFACTOR->setText(tr(""));
      RSHIFT->setText(tr(""));
      ZNAKD->setText(tr(""));
    }
  else
    {
      p=&data->mesh.row[rowIndex];
      NUP->setText(QString::number(p->nup));
      NMID->setText(QString::number(p->nmid));
      NDN->setText(QString::number(p->ndn));
      A1J->setText(QString::number(p->a1j));
      Q1J->setText(QString::number(p->q1j));
      ANJ->setText(QString::number(p->anj));
      QNJ->setText(QString::number(p->qnj));
      AMAXJ->setText(QString::number(p->amaxj));
      NMIDSP->setText(QString::number(p->nmidsp));
      IM->setText(QString::number(p->im));
      A1I->setText(QString::number(p->a1i));
      Q1I->setText(QString::number(p->q1i));
      ANI->setText(QString::number(p->ani));
      QNI->setText(QString::number(p->qni));
      AMAXI->setText(QString::number(p->amaxi));
      XFACTOR->setText(QString::number(p->xfac));
      XSHIFT->setText(QString::number(p->xshft));
      RTFACTOR->setText(QString::number(p->rfac));
      RTSHIFT->setText(QString::number(p->rshft));
      RFACTOR->setText(QString::number(p->rtfac));
      RSHIFT->setText(QString::number(p->rtshft));
      ZNAKD->setText(QString::number(p->znakd));
    }
}

void LeftWidget::updateTree()
{
  if(data->tip.exist)
    { treeview_tip->setIcon(0,QIcon(":/images/nike")); }
  else
    { treeview_tip->setIcon(0,QIcon(":/images/cross")); }
  
  if(data->hub.exist)
    { treeview_hub->setIcon(0,QIcon(":/images/nike")); }
  else
    { treeview_hub->setIcon(0,QIcon(":/images/cross")); }
  for(int i=0;i<NRMAX;i++)
    {
      if(data->geom.row[i].exist)
	{ treeview_row[i]->setIcon(0,QIcon(":/images/nike")); }
      else
	{ treeview_row[i]->setIcon(0,QIcon(":/images/cross")); }
    }
}

CombWidget::CombWidget(QWidget *parent,Data_Container *DB):myScrollArea(parent)
{
  int linenum;
  data=DB;

  QFrame *mainFrame=new QFrame;

  QLabel *N1_label=new QLabel(tr("流向网格节点数[0~%1]").arg(ZMAX));
  N1=new QLineEdit;
  N1->setText(QString::number(data->combustion.n1));
  connect(N1,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=N1->text().toInt(&s);
      if(s)
	{
	  if(cache>ZMAX)
	    {
	      data->combustion.n1=ZMAX;
	      N1->setText(QString::number(ZMAX)); 
	    }
	  else
	    { data->combustion.n1=cache; }
	}
      else
	{ N1->setText(QString::number(data->combustion.n1)); }
    });

  QLabel *M1_label=new QLabel(tr("展向网格节点数[0~%1]").arg(RMAX));
  M1=new QLineEdit;
  M1->setText(QString::number(data->combustion.m1)); 
  connect(M1,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=M1->text().toInt(&s);
      if(s)
	{
	  if(cache>RMAX)
	    {
	      data->combustion.m1=RMAX;
	      M1->setText(QString::number(RMAX));
	    }
	  else
	    { data->combustion.m1=cache; }
	}
      else
	{ M1->setText(QString::number(data->combustion.m1)); }
    });

  QLabel *SM1_label=new QLabel(tr("套筒段展向网格尺寸"));
  SM1=new QLineEdit;
  SM1->setText(QString::number(data->combustion.sm1)); 
  connect(SM1,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=SM1->text().toDouble(&s);
      if(s)
	{
	  data->combustion.sm1=cache;
	}
      else
	{ SM1->setText(QString::number(data->combustion.sm1)); }
    });

  QLabel *SM2_label=new QLabel(tr("外围段展向网格尺寸"));
  SM2=new QLineEdit;
  SM2->setText(QString::number(data->combustion.sm2));
  connect(SM2,&QLineEdit::editingFinished,[this](){
      bool s;
      int cache;
      cache=SM2->text().toDouble(&s);
      if(s)
	{
	  data->combustion.sm2=cache;
	}
      else
	{ SM2->setText(QString::number(data->combustion.sm2)); }
    });

  QLabel *KMARKD_label=new QLabel(tr("套筒段流向控制点(逗号分隔,不超过%1个)").arg(MARKMAX));
  KMARKD=new QLineEdit;
  KMARKD->setText(tr("null"));
  connect(KMARKD,&QLineEdit::editingFinished,[this](){
      char buff[1024];
      char databuf[100][1024];
      int i;
      if(KMARKD->text().isEmpty())
	{
	  KMARKD->setText(tr("null"));
	  data->combustion.markD=0;
	}
      else
	{
	  if(KMARKD->text()==tr("null"))
	    {
	      data->combustion.markD=0;
	    }
	  else
	    {
	      strcpy(buff,KMARKD->text().toStdString().c_str());
	      data->combustion.markD=strsplit(databuf,buff," ,");
	      for(i=0;i<data->combustion.markD;i++)
		{
		  data->combustion.kMarkD[i]=atoi(databuf[i]);
		}
	    }
	}
    });

  QLabel *KMARKU_label=new QLabel(tr("外围段流向控制点(逗号分隔,不超过%1个)").arg(MARKMAX));
  KMARKU=new QLineEdit;
  KMARKU->setText(tr("null"));
  connect(KMARKU,&QLineEdit::editingFinished,[this](){
      char buff[1024];
      char databuf[100][1024];
      int i;
      if(KMARKU->text().isEmpty())
	{
	  KMARKU->setText(tr("null"));
	  data->combustion.markU=0;
	}
      else
	{
	  if(KMARKU->text()==tr("null"))
	    {
	      data->combustion.markU=0;
	    }
	  else
	    {
	      strcpy(buff,KMARKU->text().toStdString().c_str());
	      data->combustion.markU=strsplit(databuf,buff," ,");
	      for(i=0;i<data->combustion.markU;i++)
		{
		  data->combustion.kMarkU[i]=atoi(databuf[i]);
		}
	    }
	}
    });

  QLabel *SND_label=new QLabel(tr("套筒段控制点处的网格尺寸(逗号分隔,控制点数+2)"));
  SND=new QLineEdit;
  QString cache=tr("");
  for(int i=0;i<data->combustion.snDNum;i++)
    {
      cache=cache+QString::number(data->combustion.snD[i]);
      if(i!=data->combustion.snDNum-1)
	{
	  cache=cache+tr(",");
	}
    }
  SND->setText(cache);
  connect(SND,&QLineEdit::editingFinished,[this](){
      char buff[1024];
      char databuf[100][1024];
      int i;
      if(SND->text().isEmpty())
	{
	  SND->setText(tr("0"));
	  data->combustion.snDNum=0;
	}
      else
	{
	  if(SND->text()==tr("0"))
	    {
	      data->combustion.snDNum=0;
	    }
	  else
	    {
	      strcpy(buff,SND->text().toStdString().c_str());
	      data->combustion.snDNum=strsplit(databuf,buff," ,");
	      for(i=0;i<data->combustion.snDNum;i++)
		{
		  data->combustion.snD[i]=atof(databuf[i]);
		}
	    }
	}
    });

  QLabel *SNU_label=new QLabel(tr("外围段控制点处的网格尺寸(逗号分隔,控制点数+2)"));
  SNU=new QLineEdit;
  cache=tr("");
  for(int i=0;i<data->combustion.snUNum;i++)
    {
      cache=cache+QString::number(data->combustion.snU[i]);
      if(i!=data->combustion.snUNum-1)
	{
	  cache=cache+tr(",");
	}
    }
  SNU->setText(cache);
  connect(SNU,&QLineEdit::editingFinished,[this](){
      char buff[1024];
      char databuf[100][1024];
      int i;
      if(SNU->text().isEmpty())
	{
	  SNU->setText(tr("0"));
	  data->combustion.snUNum=0;
	}
      else
	{
	  if(SNU->text()==tr("0"))
	    {
	      data->combustion.snUNum=0;
	    }
	  else
	    {
	      strcpy(buff,SNU->text().toStdString().c_str());
	      data->combustion.snUNum=strsplit(databuf,buff," ,");
	      for(i=0;i<data->combustion.snUNum;i++)
		{
		  data->combustion.snU[i]=atof(databuf[i]);
		}
	    }
	}
    });

  QSpacerItem *mainSpacer=new QSpacerItem(0, 0, QSizePolicy::Minimum, QSizePolicy::Expanding);

  QGridLayout *mainLayout =new QGridLayout(mainFrame);
  linenum=0;
  mainLayout->addWidget(N1_label,linenum,0);
  mainLayout->addWidget(N1,linenum,1);
  linenum++;
  mainLayout->addWidget(M1_label,linenum,0);
  mainLayout->addWidget(M1,linenum,1);
  linenum++;
  mainLayout->addWidget(SM1_label,linenum,0);
  mainLayout->addWidget(SM1,linenum,1);
  linenum++;
  mainLayout->addWidget(SM2_label,linenum,0);
  mainLayout->addWidget(SM2,linenum,1);
  linenum++;
  mainLayout->addWidget(KMARKD_label,linenum,0);
  mainLayout->addWidget(KMARKD,linenum,1);
  linenum++;
  mainLayout->addWidget(KMARKU_label,linenum,0);
  mainLayout->addWidget(KMARKU,linenum,1);
  linenum++;
  mainLayout->addWidget(SND_label,linenum,0);
  mainLayout->addWidget(SND,linenum,1);
  linenum++;
  mainLayout->addWidget(SNU_label,linenum,0);
  mainLayout->addWidget(SNU,linenum,1);
  linenum++;
  mainLayout->addItem(mainSpacer,linenum,0);

  setWidget(mainFrame);
}
